;(function (root, factory) {
	try {
		// commonjs
		if (typeof exports === 'object') {
			module.exports = factory()
			// global
		} else {
			root.toast = factory()
		}
	} catch (error) {
		console.log(
			'Isomorphic compatibility is not supported at this time for toast.'
		)
	}
})(this, function () {
	// We need DOM to be ready
	if (document.readyState === 'complete') {
		init()
	} else {
		window.addEventListener('DOMContentLoaded', init)
	}

	// Create toast object
	toast = {
		// In case toast creation is attempted before dom has finished loading!
		create: function () {
			console.error(
				[
					'DOM has not finished loading.',
					'\tInvoke create method when DOMs readyState is complete',
				].join('\n')
			)
		},
	}
	var autoincrement = 0

	// Initialize library
	function init() {
		// Toast container
		var container = document.createElement('div')
		container.id = 'cooltoast-container'
		document.body.appendChild(container)

		// @Override
		// Replace create method when DOM has finished loading
		toast.create = function (options) {
			var toast = document.createElement('div')
			toast.id = ++autoincrement
			toast.id = 'toast-' + toast.id
			toast.className = 'cooltoast-toast'

			// title
			if (options.title) {
				var h4 = document.createElement('h4')
				h4.className = 'cooltoast-title'
				h4.innerHTML = options.title
				toast.appendChild(h4)
			}

			// text
			if (options.text) {
				var p = document.createElement('p')
				p.className = 'cooltoast-text'
				p.innerHTML = options.text
				toast.appendChild(p)
			}

			// icon
			if (options.icon) {
				var img = document.createElement('img')
				img.src = options.icon
				img.className = 'cooltoast-icon'
				toast.appendChild(img)
			}

			// click callback
			if (typeof options.callback === 'function') {
				toast.addEventListener('click', options.callback)
			}

			// toast api
			toast.hide = function () {
				toast.className += ' cooltoast-fadeOut'
				toast.addEventListener('animationend', removeToast, false)
			}

			// autohide
			if (options.timeout) {
				setTimeout(toast.hide, options.timeout)
			}
			// else setTimeout(toast.hide, 2000);

			if (options.type) {
				toast.className += ' cooltoast-' + options.type
			}

			toast.addEventListener('click', toast.hide)

			function removeToast() {
				document.getElementById('cooltoast-container').removeChild(toast)
			}

			document.getElementById('cooltoast-container').appendChild(toast)
			return toast
		}
	}

	return toast
})

function show({ title = '', text = '' }) {
	const currToast = toast.create({
		title: 'üêé\t' + title,
		text,
	})
	var container = document.getElementById('cooltoast-container')
	setTimeout(() => container.removeChild(currToast), 1000)
}

let chess = {
	board: [], //  –Ω–∞—à–∞ —à–∞—Ö–º–∞—Ç–Ω–∞ –¥–æ—à–∫–∞ –≤ –º–∞—Å–∏–≤—ñ
	course: [], // –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å –∫–æ–Ω—è –º–∞—Å–∏–≤ –∑ –Ω–æ–º–µ—Ä—ñ–≤ –∫–ª—ñ–∏–Ω–æ–∫ –Ω–∞ —è–∫—ñ —Å—Ç–∞—î –∫—ñ—Ç–∏–Ω–æ–∫
	step: 1, // —è–∫–∏–π –ø–æ —Ä–∞—Ö—É–Ω–∫—É —Ö—ñ–¥
	index: null,
	trueInterval: false,
	interval: 2,
	consolka: document.getElementById('console'), // .div –ø—Å–µ–≤–¥–æ –∫–æ–Ω—Å–æ–ª—å –∫—É–¥–∞ –≤–∏–≤–æ–¥–∏–º —Ö–æ–¥–∏
	section: document.getElementsByClassName('section'), // HTML –∫–æ–ª–µ–∫—Ü—ñ—è —Å–µ–∫—Ü—ñ–π
	init: function () {
		const mainBlock = document.getElementById('mainBlock')
		const chessboard = document.createElement('div')
		const masivOfLetters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

		mainBlock.appendChild(chessboard)
		chessboard.classList.add('chessboard')

		for (let i = 1; i < 65; i++) {
			this.board.splice(i, 0, i) // –∑–∞–ø–æ–≤–Ω—é—î–º –º–∞—Å–∏–≤ —á–∏—Å–ª–∞–º–∏ –≤—ñ–¥ 0-63

			let section = document.createElement('div')
			chessboard.appendChild(section)
			section.classList.add('section')
			section.id = i
		} // –≥–µ–Ω–µ—Ä—É—î–º –º–∞—Å–∏–≤ –∑ 64 —Ü–∏—Ñ—Ä

		let x = 1,
			y = 8
		let letter = masivOfLetters[0]
		for (let i = 0; i < this.board.length; i++) {
			if (x > 8) {
				// –∫–æ–∂–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –ø—Ä–∏—Å–≤–æ—é—î–º –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
				x = 1
				letter = masivOfLetters[0]
				y--
			}
			this.board[i] = {
				posX: x, //–∫–æ–∂–Ω—É —Ü–∏—Ñ—Ä—É –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º –≤ –æ–±—î–∫—Ç –ø—Ä–∏—Å–≤–æ—é—î–º –∑–Ω–∞—á–µ–Ω–Ω—è x,y —Ç–∞–∫–æ–∂
				posY: y, //—á–∏ —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å —ñ —Ç–∞–∫–æ–∂ —á–∏ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É –≤–∂–µ —Å—Ç–∞–≤–∞–ª–∏
				horse: false,
				pos: true,
				letters: letter,
			}
			x++
			letter = masivOfLetters[x - 1]

			if ((i % 2 == 0 && y % 2 == 0) || (i % 2 != 0 && y % 2 != 0)) {
				// –∑–∞–º–∞–ª—å–æ–≤—É—î–º —à–∞—Ö–º–∞—Ç–Ω—É –¥–æ—à–∫—É
				this.section[i].style.backgroundColor = '#FBF9F7' // —è–∫—â–æ —ñ —Ç–∞ –£ –¥—ñ–ª—è—Ç—å—Å—è –±–µ–∑ –æ—Å—Ç–∞—á—ñ –Ω–∞ 2 –∞–±–æ —è–∫—â–æ —ñ,–£ –¥—ñ–ª—è—Ç—å—Å—è –∑ –æ—Å—Ç–∞—á–µ—é —Ç–æ –±—ñ–ª–∏–π
			} else {
				this.section[i].style.backgroundColor = '#211E1D' // —è–∫—â–æ —ñ –¥—ñ–ª–∏—Ç—å—Å—è –∑ –æ—Å—Ç–∞—á–µ—é –∞ –£ –±–µ–∑ –æ—Å—Ç–∞—á—ñ –∞–±–æ –Ω–∞–≤–ø–∞–∫–∏ —Ç–æ —á–æ—Ä–Ω–∏–π
			}
		} //

		// –ó–ê–ü–£–°–ö–ê–Ñ–ú –í–°–Ü –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á //
		this.randomPosOfHorse()
		this.clearBoard()
		this.plusOnePos()
		this.prevStep()
		this.clickChecker()
	},
	nextStep: function () {
		let current // –Ω–æ–º–µ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —è–∫—ñ–π —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å
		const that = this
		for (let i = 0; i < this.board.length; i++) {
			// –∑ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É —à—É–∫–∞—î–º –Ω–æ–º–µ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —è–∫—ñ–π —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å
			if (this.board[i].horse == true) {
				current = i
				this.section[i].textContent = this.step
				that.section[i].classList.add('scale_up_center')
				this.section[i].classList.add('current')
			}
		}

		//–†–û–ë–ò–ú –ú–ê–°–ò–í –í–°–Ü–• –ú–û–ñ–õ–ò–í–ò–• –•–û–î–Ü–í –ö–û–ù–Ø
		var vars = makeMasiOfNextPos(current)
		let trueCell = []

		//–ü–†–û–í–ï–†–ö–ê  –ö–õ–ï–¢–û–ö –ù–ê –ö–û–¢–û–†–ò–ï –ú–û–ñ–ù–û –í–°–¢–ê–¢–¨
		proverkaNextPos(vars, trueCell)

		let nextArr = []
		let nextTrueCell = []

		//–ú–ê–°–ò–í –ó –ö–Ü–õ–¨–ö–û–°–¢–Ü –•–û–î–Ü–í –Ø–ö–Ü –ú–û–ñ–ù–ê –ó–†–û–ë–ò–¢–ò –ó –ö–õ–¢–ò–ù–û–ö –ù–ê –Ø–ö–Ü –ú–û–ñ–ù–ê –í–°–¢–ê–¢–ò
		//–ù–ê–ü–†–ò–ö–õ–ê–î –ö–Ü–ù–¨ –ù–ê: 7c —Å—Ç–∞—î –Ω–∞: 8e, –∑ 8–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ 3 —Ö–æ–¥–∏ 7g,6f,6d
		nextArr = whatToDoNext()

		let k = nextArr.length
		let min = nextArr[0]
		let index = 0
		while (k--) {
			/// —Å–æ—Ä—Ç—É—î–º –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ –º—ñ—Ä—ñ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ —Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑ —è–∫–æ—ó –Ω–∞–π–º–µ–Ω—à–µ —Ö–æ–¥—ñ–≤ = —ó—ó —ñ–Ω–¥–µ–∫—Å—É
			if (nextArr[k] < min) {
				min = nextArr[k]
				index = k
			}
		}

		// –ó–ê–ë–ò–†–ê–Ñ–ú –ö–û–ù–Ø –ó –ü–û–¢–û–ß–ù–û–á –ö–õ–Ü–¢–ò–ù–ö–ò //
		this.section[current].classList.remove('current')
		this.board[current].horse = false
		this.board[current].pos = false

		// –°–¢–ê–í–ò–ú –ö–û–ù–Ø –ù–ê –ù–ê–°–¢–£–ü–ù–£ –ö–õ–Ü–¢–ò–ù–ö–£ //
		this.board[trueCell[index]].horse = true
		this.section[trueCell[index]].classList.add('current')
		this.course.push(trueCell[index])

		// –ó–ê–ö–ò–î–£–Ñ–ú –í .div –ó–í–Ü–î–ö–ò –Ü –ö–£–î–ê –•–û–î–ò–í –ö–Ü–ù–¨
		this.consolka.innerHTML +=
			'<p>' +
			this.board[current].posY +
			this.board[current].letters +
			' &rarr; ' +
			this.board[trueCell[index]].posY +
			this.board[trueCell[index]].letters +
			'</p>'
		// '<Br/>'
		show({
			title:
				this.board[current].posY +
				this.board[current].letters +
				' &rarr; ' +
				this.board[trueCell[index]].posY +
				this.board[trueCell[index]].letters,
		})
		this.step++
		if (this.step == 64) {
			// —è–∫—â–æ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–∏—Å—å –æ–Ω—É–ª—è—î–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª
			clearInterval(this.interval)
		}

		function makeMasiOfNextPos(index) {
			x = that.board[index].posX // –ø–æ–ª—É—á–∞—î–º –∫–æ—Ä–¥–∏–Ω–∞—Ç–∏ X –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —è–∫—ñ–π —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å
			y = that.board[index].posY // –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —Ç—ñ–ª—å–∫–∏ Y
			let masivVars = [
				[x + 1, y + 2], // —Ä–æ–±–∏–º –º–∞—Å–∏–≤ –∑ –º–æ–∂–ª–∏–≤–∏—Ö —Ö–æ–¥—ñ–≤ –∫–æ–Ω—è (–¥–≤—É—Ö-—Ñ–∞–∫—Ç–æ—Ä–Ω–∏–π –•, –£)
				[x + 2, y + 1],
				[x + 2, y - 1],
				[x + 1, y - 2],
				[x - 1, y - 2],
				[x - 2, y - 1],
				[x - 2, y + 1],
				[x - 1, y + 2],
			]
			return masivVars
		}
		function proverkaNextPos(masivNextPos, masivIndex) {
			for (let k = 0; k < that.board.length; k++) {
				for (let i = masivNextPos.length - 1; i >= 0; i--) {
					// —á–µ—Ä–µ–∑ –¥–≤–∞ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥–∞–Ω—è—î–º –¥–≤–∞ –º–∞—Å–∏–≤–∞
					if (
						masivNextPos[i][0] == that.board[k].posX &&
						masivNextPos[i][1] == that.board[k].posY &&
						that.board[k].pos == true &&
						that.board[k].horse == false
					) {
						masivIndex.push(k) //—ñ–Ω–¥–µ–∫—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —è–∫—É –º–æ–∂–Ω–∞ –≤—Å—Ç–∞—Ç–∏ –∑–∞–Ω–æ—Å–∏–º –≤ –º–∞—Å–∏–≤
					}
				}
			}
		}
		function whatToDoNext() {
			// –ø—Ä–æ–≤—ñ—Ä—è—î–º –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–∞ —Ç–µ —Å–∫—ñ–ª—å–∫–∏ –∑ –Ω–µ—ó –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ö–æ–¥—ñ–≤
			for (let i = 0; i < trueCell.length; i++) {
				nextTrueCell.length = 0 /// –û–±–Ω—É–ª—è—î–º —Ç–∏–º—á–∞—Å–æ–≤–∏–π –º–∞—Å–∏–≤

				var nextVars = makeMasiOfNextPos(trueCell[i]) // —Ä–æ–±–∏–º –º–∞—Å–∏–≤ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤ - –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤ –∫–æ–Ω—è

				//–ü–†–û–í–ï–†–ö–ê  –ö–õ–ï–¢–û–ö –ù–ê –ö–û–¢–û–†–ò–ï –ú–û–ñ–ù–û –í–°–¢–ê–¢–¨
				proverkaNextPos(nextVars, nextTrueCell)
				//console.log(nextTrueCell);
				nextArr.push(nextTrueCell.length) // –±–µ—Ä–µ–º –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤—É —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ö–æ–¥—ñ–≤ —ñ –∑–∞–Ω–æ—Å–∏–º –¥–æ–≤–∂–∏–Ω–∏ –≤ —ñ–Ω—à–∏–π –º–∞—Å–∏–≤
			}
			return nextArr // –ø–æ–≤–µ—Ä—Ç–∞—î–º —Ü–µ–π –º–∞—Å–∏–≤
		}
	},
	/// –°–¢–ê–Ñ–ú –ù–ê –ú–ò–ù–£–õ–£ –ö–õ–Ü–¢–ò–ù–ö–£
	prevStep: function () {
		const that = this
		const prevButton = document.getElementById('prevPos')
		prevButton.addEventListener('click', function () {
			let proverka = 1 // –∑–º—ñ–Ω–Ω–∞ –∑—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —â–æ–± —á–µ—Ä–µ–∑ –Ω–µ—ó –ø—Ä–æ–≤—ñ—Ä—è—Ç–∏ –¥–≤–∞ —Ü–∏–∫–ª–∞ —ñ —â–æ–± –æ–¥–∏–Ω –≤–∏–∫–æ–Ω—É–≤–∞–≤—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ–≥–æ
			let letter // –±—É–¥–µ–º –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Å—é–¥–∞ –¥–µ —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å
			if (that.index == null || that.step == 1 || that.trueInterval == true) {
				// –ø—Ä–æ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–µ —á–∏ –Ω–µ —Å—Ç–æ—ó–º–æ –º–∏ –Ω–∞ –ø–µ—Ä—à—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
				console.log('error preStep') // –ø—Ä–æ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–µ —á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
			} else {
				for (let i = 0; i < that.board.length; i++) {
					//–ó–†–û–ë–õ–ï–ù–û –î–í–ê –¶–ò–ö–õ–ò –¢–û–ú–£ –©–û –î–í–Ü –ü–†–û–í–Ü–†–ö–ò –ú–ê–Æ–¢–¨ –í–ò–ö–û–ù–£–í–ê–¢–ò–°–¨ –ü–û–°–õ–Ü–î–û–í–ù–û,
					if (that.board[i].horse == true) {
						//–Ü –Ø–ö–©–û –û–î–ò–ù –¶–ò–ö–õ, –ú–û–ñ–ï –í–ò–ô–¢–ò –¢–ê–ö –©–û –°–ü–û–ß–ê–¢–ö–£ –í–ò–ö–û–ù–ê–Ñ–¢–¨–°–Ø –î–†–£–ì–ê –ê –ü–û–¢–Ü–ú –ü–ï–†–®–ê, –ê –¢–†–ï–ë–ê –ü–û–°–õ–Ü–î–û–í–ù–û
						proverka = null
						that.section[i].textContent = '' // –∑–∞–±–∏—Ä–∞—î–º –∫–æ–Ω—è –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —è–∫—ñ–π –≤—ñ–Ω —Å—Ç–æ—ó—Ç—å
						that.section[i].classList.remove('scale_up_center')
						that.section[i].classList.remove('current')
						that.board[i].horse = false
						that.board[i].pos = true

						console.log('del current')
						letter = that.board[i].posY + that.board[i].letters // –ø—Ä–∏—Å–≤–æ—é—î–º –¥–µ —Å—Ç–æ—ó—Ç—å –∫—ñ–Ω—å –≤ –±—É–∫–≤–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ 2F, 4h....
					}
				}
				for (let i = 0; i < that.board.length; i++) {
					if (
						that.section[i].textContent == that.step - 1 &&
						proverka == null
					) {
						// —à—É–∫–∞—î–º –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É
						that.step--
						proverka = 1
						that.board[i].pos = true ///—Å—Ç–∞–≤–∏–º –∫–æ–Ω—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É
						that.board[i].horse = true
						that.section[i].classList.add('current')
						that.section[i].classList.add('scale_up_center')
						console.log('set next')
						that.consolka.innerHTML +=
							that.board[i].posY +
							that.board[i].letters +
							' &larr; ' +
							letter +
							'<Br/>'
						show({
							title:
								that.board[i].posY +
								that.board[i].letters +
								' &larr; ' +
								letter,
						})
					}
				}
			}
		})
	},
	start: function () {
		this.interval = setInterval(() => {
			this.nextStep()
			this.trueInterval = true // –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ç–æ–≥–æ —â–æ–± –¥–µ–∞–∫—Ç–∏–≤–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
		}, 200)
		setTimeout(() => {
			this.trueInterval = false
		}, 200 * 64 + 10) //—ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ö–æ–¥–∞–º–∏ 200 —ñ –≤—Å—å–æ–≥–æ 64 —Ö–æ–¥–∏ —Ç–æ–º—É –º–Ω–æ–∂–∏–º –Ω–∞ 64 —ñ –¥–æ–¥–∞—î–º 10 —â–æ–± –Ω–∞–≤—î—Ä–Ω—ñ–∫–∞
	},
	clearBoard: function () {
		const that = this
		const clearDesk = document.getElementById('clear')
		clearDesk.addEventListener('click', function () {
			if (that.trueInterval == false) {
				/// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ —â–æ–± –¥–æ—à–∫–∞ –±—É–ª–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —è–∫—â–æ –¥–æ—à–∫–∞ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –Ω–µ –æ–Ω—É–ª—è—ç–º —ó—ó
				that.index = null
				that.step = 1
				that.course = []
				that.consolka.innerHTML = ''
				for (let i = 0; i < that.board.length; i++) {
					//–æ–±–Ω—É–ª—è—î–º  —à–∞—Ö–º–∞—Ç–Ω—É –¥–æ—à–∫—É
					that.section[i].textContent = ''
					that.section[i].classList.remove('current')
					that.section[i].classList.remove('scale_up_center')
					that.board[i].horse = false
					that.board[i].pos = true
				}
			}
		})
	},
	randomPosOfHorse: function () {
		const that = this
		const randomButton = document.getElementById('button')
		randomButton.addEventListener('click', function () {
			if (that.index == null) {
				that.index = Math.round(Math.random() * 63) // –≥–µ–Ω–µ—Ä—É—î–º —Ä–∞–Ω–¥–æ–º–Ω—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ —è–∫—É —Å—Ç–∞–Ω–µ –∫—ñ–Ω—å
				if (that.index == 24) {
					// –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 24 –ø—Ä–æ—Ö—ñ–¥ –Ω–µ –º–æ–∂–ª–∏–≤–∏–π —Ç–æ–º—É —è–∫—â–æ –≤–æ–Ω–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞—Å—å, –≥–µ–Ω–µ—Ä—É—î–º —ñ–Ω—à—É
					that.index = Math.round(Math.random() * 63)
				}
				that.board[that.index].horse = true
				that.start()
			}
		})
	},
	plusOnePos: function () {
		const that = this
		const nextButton = document.getElementById('nextPos')
		nextButton.addEventListener('click', function () {
			if (that.trueInterval == false) {
				// –ø—Ä–æ–≤—ñ—Ä—è—î–º —á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
				if (that.index == null) {
					// –ø—Ä–æ–≤—ñ—Ä—è—î–º —á–∏ –Ω–µ –Ω–∞ 1 –∫–ª—ñ—Ç–∏–Ω—Ü—ñ —Å—Ç–æ—ó—Ç—å
					that.board[0].horse = true // —Å—Ç–∞–≤–∏–º –Ω–∞ 1 –∫–ª—ñ—Ç–∏–Ω–∫—É
					that.index = 0
					that.nextStep()
				} else if (that.step == 64) {
					console.log('error')
				} else {
					that.nextStep()
				}
			}
		})
	},
	clickChecker: function () {
		const that = this
		Array.from(that.section, (el) =>
			el.addEventListener('click', (e) => {
				//–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º –∫–æ–ª–µ–∫—ñ—é HTML –≤ –º–∞—Å–∏–≤
				console.log(el.id) // —Å–ª—É—Ö–∞—î–º –∫–æ–∂–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É —á–∏ —ó—ó –Ω–µ –∫–ª—ñ–∫–Ω—É–ª–∏ —Ç–∞–º –¥–µ –∫–ª—ñ–∫–Ω—É–ª–∏ —Å—Ç–∞–≤–∏–º –∫–æ–Ω—è
				if (that.index == null) {
					if (el.id - 1 == 24) {
						alert('–ó —Ü—ñ—î—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø—Ä–æ—Ö—ñ–¥ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π')
					} else {
						that.index = el.id - 1
						that.board[that.index].horse = true
						that.start()
					}
				}
			})
		)
	},
}
chess.init()
const infoBtn = document.getElementById('info_btn')
const infoDialog = document.getElementById('info_dialog')
const closeDialog = document.getElementById('close_dialog')
const backdrop = document.createElement('div')
backdrop.classList.add('backdrop')
document.body.appendChild(backdrop)
const toggleMovesButton = document.getElementById('toggleMoves')
toggleMovesButton.onclick = () => {
	const documentConsole = document.getElementById('console')

	toggleMovesButton.children[0].classList.toggle('fa-shoe-prints')
	toggleMovesButton.children[0].classList.toggle('fa-xmark')
	documentConsole.classList.toggle('visible')
	console.log(documentConsole)
}
infoBtn.onclick = () => {
	backdrop.classList.toggle('active')
	infoDialog.classList.toggle('active')
}
closeDialog.onclick = () => {
	backdrop.classList.remove('active')
	infoDialog.classList.remove('active')
}
backdrop.onclick = () => {
	backdrop.classList.remove('active')
	infoDialog.classList.remove('active')
}
